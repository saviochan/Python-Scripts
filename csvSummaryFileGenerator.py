# -*- coding: utf-8 -*-
"""
Version 1.0
Created on 150509.
@author: Jason
USAGE: This script summarizes individual .csv files generated by the astrocyteCalciumPeakDetection.py script.
NOTE: Go to Preferences > Run > and select "Execute in a new dedicated Python interpreter" to avoid issues with the GUI window.
"""

import math
import numpy as np
import scipy as sp
import scipy.stats
import csv
import Tkinter, tkFileDialog
import pandas as pd
import glob


#DEFINE FUNCTIONS / SCRIPT OUTLINE
def buildData(fileList, loop):
    data = pd.DataFrame.from_csv(fileList[loop])
    originalPeaks = len(data.columns.values)
    return data, originalPeaks


def getStartAndStop(data):     
    start = data.loc[data.index.values[0],:]
    stop = data.loc[data.index.values[1],:]
    return start, stop

def removeDoublets(data, originalPeaks):
    dropArray = []
    for x in range(1,originalPeaks):
        y = x-1
        peak1 = start[y]
        peak2 = start[x]
        if (peak2-peak1) < 5:
            dropArray.append(x)
    newdata = data.drop(data.columns[dropArray],1)
    peaks = len(newdata.columns.values)
    return newdata, peaks

def findComplexPeaks(start, stop, peaks):
    complexArray = []                                                                       #THIS IS A MATRIX FOR COMPLEX PEAKS
    removeArray = []                                                                        #THIS HOLDS THE COMPLEX PEAK NUMBERS
    simpleArray = list(xrange(peaks))                                                       #THIS IS THE LIST OF ALL SIMPLE PEAK COLUMN NUMBERS
    for x in range(0,peaks-1):
        if x not in removeArray:    
            y = x+1
            if stop[x] > start[y]:                                                          #FIND PEAKS THAT STOP AFTER THE NEXT PEAK STARTS
                cpeak = []                                                                  #MAKE TEMP ARRAY FOR AN IDENTIFIED COMPLEX PEAK
                cpeak.append(x)                                                             #ADD PEAK 1 TO TEMP ARRAY
                cpeak.append(y)                                                             #ADD PEAK 2 TO TEMP ARRAY
                removeArray.append(x)                                                       #ADD PEAK 1 TO REMOVE ARRAY
                removeArray.append(y)                                                       #ADD PEAK 2 TO REMOVE ARRAY
                for z in range(y+1,peaks):                                                  #LOOK FOR OTHER PEAKS
                    if stop[x] > start[z]:
                        cpeak.append(z)
                        removeArray.append(z)
                complexArray.append(cpeak)                                                  #ADD COMPLEX PEAK NUMBERS INTO THE COMPLEX ARRAY
    if len(removeArray) > 0:
        for x in range(0,len(removeArray)):
            simpleArray.remove(removeArray[x])                                              #REMOVE ANY COMPLEX PEAKS FROM THE SIMPLE ARRAY
    return simpleArray, complexArray, removeArray


#DEFINE VARIABLES
cellFile = []                                                                               #cell filename
totalEvents = []                                                                            #number of events for that cell
simplePeakCount = []                                                                        #number of simple peaks
simpleDeltaF = []                                                                           #dF for simple peaks 
simpleDuration = []                                                                         #duration of simple peaks 
complexPeakCount = []                                                                       #number of complex peaks
peaksPerComplex = []                                                                        #events per complex peak 
complexDeltaF = []                                                                          #dF for complex peaks 
complexDuration = []                                                                        #duration of complex peaks ADD
silentCells = []                                                                            #cells with no events


#CODE
root = Tkinter.Tk()
root.withdraw()
dirname = tkFileDialog.askdirectory(parent=root,initialdir="/",title='Please select the directory that contains your .csv files')
if len(dirname) > 0:
    print "You chose %s" % dirname

csvFiles = glob.glob(dirname+"/*.csv")                                                      #GET CSV FILES
for loop in range(len(csvFiles)):    
    data, opeaks = buildData(csvFiles, loop)                                                #BUILD DATAFRAME FROM CSV    
    start, stop = getStartAndStop(data)                                                     #GENERATE START AND STOP ARRAYS
    if start[0] == 'silent':                                                                #DETERMINE IF SILENT
        silentCells.append(csvFiles[loop])                                                  #***ADD FILENAME TO SILENTCELLS ARRAY***
    else:                                                                                   #IF NOT SILENT, THEN PROCESS
        cellFile.append(csvFiles[loop])                                                     #***ADD FILENAME TO CELLFILE ARRAY***
        newdata, peaks = removeDoublets(data, opeaks)                                       #REMOVE PEAKS THAT OCCUR TOO SOON
        totalEvents.append(peaks)                                                           #***DATA ENTRY***
        start, stop = getStartAndStop(newdata)
        simpleArray, complexArray, removeArray = findComplexPeaks(start, stop, peaks)       #FIND COMPLEX PEAKS
            
#BUILD SIMPLE DATASET
        simplePeaks = newdata.drop(newdata.columns[removeArray],1)                          #REMOVE THE COMPLEX PEAKS FROM THE SIMPLE PEAKS DATA ARRAY
        nSimplePeaks = len(simplePeaks.columns.values)
        if nSimplePeaks == 0:
            simplePeakCount.append('NaN')                                                   #***DATA ENTRY***
            simpleDeltaF.append('NaN')                                                      #***DATA ENTRY***
            simpleDuration.append('NaN')                                                    #***DATA ENTRY***
        if nSimplePeaks > 0:
            simplePeakCount.append(nSimplePeaks)                                            #***DATA ENTRY***
            baseline = simplePeaks.loc[data.index.values[3],:]
            maxdf = simplePeaks.loc[data.index.values[4],:]
            duration = simplePeaks.loc[data.index.values[2],:]
            simpleDeltaFArray = []
            for x in range(0,nSimplePeaks):
                simpleDeltaFArray.append(maxdf[x]-baseline[x])
            simpleDeltaF.append(np.median(simpleDeltaFArray))                               #***DATA ENTRY***
            simpleDuration.append(np.median(duration))                                      #***DATA ENTRY***
    
    
#BUILD COMPLEX DATASETS
        nComplexPeaks = len(complexArray)
        if nComplexPeaks == 0:
            complexPeakCount.append('NaN')                                                  #***DATA ENTRY***
            complexDeltaF.append('NaN')                                                     #***DATA ENTRY***
            peaksPerComplex.append('NaN')                                                   #***DATA ENTRY***
            complexDuration.append('NaN')                                                   #***DATA ENTRY***
        if nComplexPeaks > 0:
            complexPeakCount.append(nComplexPeaks)                                          #***DATA ENTRY***
            peaksper = []
            cDeltaF = []
            cDuration = []
            for x in range(0,nComplexPeaks):
                cpeakStart = []
                cpeakStop = []        
                cpDeltaF = []
                cpeak = complexArray[x]
                peaksper.append(len(cpeak))
                for y in range(0,len(cpeak)):
                    value = cpeak[y]
                    cpDeltaF.append(newdata.loc[newdata.index.values[4],newdata.columns.values[value]] - newdata.loc[newdata.index.values[3],newdata.columns.values[value]])
                    cpeakStart.append(newdata.loc[newdata.index.values[0],newdata.columns.values[value]])
                    cpeakStop.append(newdata.loc[newdata.index.values[1],newdata.columns.values[value]])
                cDeltaF.append(np.max(cpDeltaF))
                cpeakmin = np.min(cpeakStart)
                cpeakmax = np.max(cpeakStop)
                cDuration.append(cpeakmax - cpeakmin)
            complexDeltaF.append(np.median(cDeltaF))                            #***DATA ENTRY***
            peaksPerComplex.append(np.median(peaksper))                         #***DATA ENTRY***
            complexDuration.append(np.median(cDuration))                        #***DATA ENTRY***


#ORGANIZE DATA INTO A TABLE AND EXPORT AS CSV
cellFile.insert(0, 'active cells')
totalEvents.insert(0, 'number of events')
simplePeakCount.insert(0, 'number of simple peaks')
simpleDeltaF.insert(0, 'simple peak deltaF')
simpleDuration.insert(0, 'simple peak duration (s)')
complexPeakCount.insert(0, 'number of complex events')
peaksPerComplex.insert(0, 'peaks per complex events')
complexDeltaF.insert(0, 'complex event deltaF')
complexDuration.insert(0, 'complex event duration (s)')
silentCells.insert(0, 'silent cells')
data = [cellFile, totalEvents, simplePeakCount, simpleDeltaF, simpleDuration, complexPeakCount, peaksPerComplex, complexDeltaF, complexDuration, silentCells]
csvfile = dirname+"/summaryFile.csv"
with open(csvfile, "w") as output:
    writer = csv.writer(output, lineterminator='\n')
    writer.writerows(data)
print 'Finished!'